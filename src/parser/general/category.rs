use winnow::combinator::{alt, delimited, separated, terminated};
use winnow::error::StrContext;
use winnow::prelude::*;

use super::character::ws_parser;

/*
Categories
    "(" Category ("," ws Category)* ")"
*/
#[derive(Debug)]
pub struct Categories(Vec<Category>);

pub fn categories_parser<'a>(input: &mut &'a str) -> PResult<Categories> {
    delimited(
        '(',
        separated(1.., category_parser, terminated(',', ws_parser)),
        ')',
    )
    .map(Categories)
    .context(StrContext::Label("categories"))
    .parse_next(input)
}

/*
Category
    an.
    arch.
    atsch.
    biol.
    bot.
    chem.
    // todo: remove, fix print error in source
    chews.
    chew.
    desp.
    dschaw.
    elektr.
    ethn.
    euph.
    fam.
    geol.
    gr.
    gud.
    gur.
    hist.
    imer.
    ing.
    iro.
    jur.
    kach.
    khar.
    khis.
    Kind.
    koll.
    landw.
    letsch.
    math.
    med.
    mil.
    min.
    mingr.
    moch.
    moral.
    mthiul.
    mus.
    myth.
    nz.
    o-imer.
    o-ratsch.
    photogr.
    phys.
    poet.
    pol.
    psch.
    ratsch.
    rl.
    spo.
    tech.
    thian.
    thusch.
    tschan.
    typ.
    u-imer.
    umg.
    unk.
    u-ratsch.
    vr.
    vulg.
    zo.
*/
#[derive(Debug, Clone)]
pub enum Category {
    AN,
    ARCH,
    ATSCH,
    BIOL,
    BOT,
    CHEM,
    CHEW,
    DESP,
    DSCHAW,
    ELEKTR,
    ETHN,
    EUPH,
    FAM,
    GEOL,
    GR,
    GUD,
    GUR,
    HIST,
    IMER,
    ING,
    IRO,
    JUR,
    KACH,
    KHAR,
    KHIS,
    KIND,
    KOLL,
    LANDW,
    LETSCH,
    MATH,
    MED,
    MIL,
    MIN,
    MINGR,
    MOCH,
    MORAL,
    MTHIUL,
    MUS,
    MYTH,
    NZ,
    OIMER,
    ORATSCH,
    PHOTOGR,
    PHYS,
    POET,
    POL,
    PSCH,
    RATSCH,
    RL,
    SPO,
    TECH,
    THIAN,
    THUSCH,
    TSCHAN,
    TYP,
    UIMER,
    UMG,
    UNK,
    URATSCH,
    VR,
    VULG,
    ZO,
}

pub fn category_parser<'a>(input: &mut &'a str) -> PResult<Category> {
    terminated(
        alt((
            alt((
                "an".value(Category::AN),
                "arch".value(Category::ARCH),
                "atsch".value(Category::ATSCH),
                "biol".value(Category::BIOL),
                "bot".value(Category::BOT),
                "chem".value(Category::CHEM),
                // todo: remove, fix print error in source
                alt(("chews", "chew")).value(Category::CHEW),
                "desp".value(Category::DESP),
                "dschaw".value(Category::DSCHAW),
                "elektr".value(Category::ELEKTR),
                "ethn".value(Category::ETHN),
                "euph".value(Category::EUPH),
                "fam".value(Category::FAM),
                "geol".value(Category::GEOL),
                "gr".value(Category::GR),
                "gud".value(Category::GUD),
                "gur".value(Category::GUR),
                "hist".value(Category::HIST),
                "imer".value(Category::IMER),
                "ing".value(Category::ING),
            )),
            alt((
                "iro".value(Category::IRO),
                "jur".value(Category::JUR),
                "kach".value(Category::KACH),
                "khar".value(Category::KHAR),
                "khis".value(Category::KHIS),
                "Kind".value(Category::KIND),
                "koll".value(Category::KOLL),
                "landw".value(Category::LANDW),
                "letsch".value(Category::LETSCH),
                "math".value(Category::MATH),
                "med".value(Category::MED),
                "mil".value(Category::MIL),
                "min".value(Category::MIN),
                "mingr".value(Category::MINGR),
                "moch".value(Category::MOCH),
                "moral".value(Category::MORAL),
                "mthiul".value(Category::MTHIUL),
                "mus".value(Category::MUS),
                "myth".value(Category::MYTH),
                "nz".value(Category::NZ),
                "o-imer".value(Category::OIMER),
            )),
            alt((
                "o-ratsch".value(Category::ORATSCH),
                "photogr".value(Category::PHOTOGR),
                "phys".value(Category::PHYS),
                "poet".value(Category::POET),
                "pol".value(Category::POL),
                "psch".value(Category::PSCH),
                "ratsch".value(Category::RATSCH),
                "rl".value(Category::RL),
                "spo".value(Category::SPO),
                "tech".value(Category::TECH),
                "thian".value(Category::THIAN),
                "thusch".value(Category::THUSCH),
                "tschan".value(Category::TSCHAN),
                "typ".value(Category::TYP),
                "u-imer".value(Category::UIMER),
                "umg".value(Category::UMG),
                "unk".value(Category::UNK),
                "u-ratsch".value(Category::URATSCH),
                "vr".value(Category::VR),
                "vulg".value(Category::VULG),
                "zo".value(Category::ZO),
            )),
        )),
        '.',
    )
    .context(StrContext::Label("category"))
    .parse_next(input)
}
